import streamlit as st
import requests
from datetime import datetime

API_BASE_URL = "https://chmurki.shop/api"

st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä–∏", page_icon="üï∏Ô∏è")
st.title("üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä—Å–µ—Ä—ñ–≤")

# üëâ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞—Ä—Å–µ—Ä—ñ–≤
parser_names = []
with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä—ñ–≤..."):
    try:
        response = requests.get(f"{API_BASE_URL}/list")
        if response.ok:
            parser_names = response.json().get("parsers", [])
        else:
            st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä—ñ–≤")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {str(e)}")

# üëâ –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö –ø–∞—Ä—Å–µ—Ä—ñ–≤
st.subheader("üß® –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–∞—Ä—Å–µ—Ä–∏")

if st.button("üîÅ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ"):
    with st.spinner("–ü–∞—Ä—Å–∏–Ω–≥..."):
        response = requests.get(f"{API_BASE_URL}/")
        if response.ok:
            result = response.json()
            st.success("‚úÖ –£—Å—ñ –ø–∞—Ä—Å–µ—Ä–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è")

            if "execution_seconds" in result:
                st.info(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result['execution_seconds']} —Å–µ–∫.")

            st.json(result)

            if "excel" in result:
                excel_path = result["excel"]
                excel_url = f"{API_BASE_URL}/download"

                excel_response = requests.get(excel_url)
                if excel_response.ok:
                    st.download_button(
                        label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel (–≤—Å—ñ –ø–∞—Ä—Å–µ—Ä–∏)",
                        data=excel_response.content,
                        file_name=excel_path.split("/")[-1],
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                else:
                    st.warning("‚ö†Ô∏è Excel-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π.")
        else:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code} - {response.text}")

# üëâ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
st.subheader("üß∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞–º–∏")

for parser_name in parser_names:
    with st.expander(f"üîß {parser_name}"):
        key = f"editor_{parser_name}"

        # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ session_state, —è–∫—â–æ —â–µ –Ω–µ–º–∞
        if key not in st.session_state:
            try:
                r = requests.get(f"{API_BASE_URL}/links/{parser_name}")
                if r.ok:
                    st.session_state[key] = r.json().get("links", "")
                else:
                    st.session_state[key] = ""
                    st.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ links.txt –¥–ª—è {parser_name}")
            except Exception as e:
                st.session_state[key] = ""
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {str(e)}")

        # —Ä–µ–¥–∞–∫—Ç–æ—Ä
        edited_links = st.text_area(
            label="URL º–∏",
            value=st.session_state[key],
            height=200,
            key=key
        )

        col1, col2 = st.columns(2)

        with col1:
            if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", key=f"save_{parser_name}"):
                try:
                    save_resp = requests.post(
                        f"{API_BASE_URL}/links/{parser_name}",
                        json={"links": edited_links}
                    )
                    if save_resp.ok:
                        st.success("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ!")
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {save_resp.status_code}")
                except Exception as e:
                    st.error(f"‚ùå {str(e)}")

        with col2:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", key=f"run_{parser_name}"):
                with st.spinner("–ü–∞—Ä—Å–∏–Ω–≥..."):
                    run_resp = requests.post(f"{API_BASE_URL}/", json={"parser": parser_name})
                    if run_resp.ok:
                        result = run_resp.json()
                        st.success("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤—Å—è")

                        st.json({
                            **result,
                            "‚è±Ô∏è execution_seconds": result.get("execution_seconds", "‚Äî")
                        })

                        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel
                        if "excel" in result:
                            filename = result["excel"].split("/")[-1]
                            download_url = f"{API_BASE_URL}/download/{parser_name}"
                            excel_resp = requests.get(download_url)
                            if excel_resp.ok:
                                st.download_button(
                                    label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel",
                                    data=excel_resp.content,
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                )
                            else:
                                st.warning("‚ö†Ô∏è Excel-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π.")
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {run_resp.status_code}")

